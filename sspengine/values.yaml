# Default values for ibm-ssp-engine.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  # set full path with image name
  repository: image-registry.openshift-image-registry.svc:5000/b2bi-env1/ssp_engine_6011_02
  # set image tag
  tag: 6.0.1.1.02
  # Create image secret and set the image secret name below. 
  imageSecrets: default-dockercfg-cv52c
  # image pull policy 
  pullPolicy: Always

nameOverride: ""
fullnameOverride: ""
arch: "amd64"


engineArgs:
  # User UID map between the processes running inside a container and the host system.
  appUserUid: 1000
  # User GID map between the processes running inside a container and the host system.
  appUserGid: 1000  
   # Set the value "true" to Generate Key Certificate, if you are installing Secure Proxy Engine before CM and supply the following
   # key certificate details: keyCertFileName, keyCertAliasName, keyCertStorePassphrase(secret) and keyCertEncryptPassphrase(secret)
   # Set the value "false" to Import Key Cert Exported from Secure Proxy CM if you have installed Secure Proxy CM first and
   # supply the following key certificate details: keyCertFileName, keyCertAliasName and keyCertEncryptPassphrase(secret)  
  keyCertExport: false
  # Key certificate file name 
  keyCertFileName: "defkeyCert.txt"
  # Certificate alias value. 
  keyCertAliasName: "keycert"
  # JVM max heap size - don't set more than container limit resource memory. 
  maxHeapSize: "2048m"
  # Change SSP brand name if required else keep it as it is.
  signOnDirName: "Signon"

  
# persistence section specifies persistence settings which apply to the whole chart
persistentVolume:
  enabled: true
  # If we want to use any specific PV to bind with PVC then provide PV label name and value else it would be bind with any available PV.
  # Default value is mentioned the below.
  labelName: "app.kubernetes.io/name"
  labelValue: "ibm-ssp-engine-pv-name"
  # useDynamicProvisioning is whether or not to use Storage Classes to dynamically create Persistent Volumes 
  useDynamicProvisioning: false
  size: 2Gi
  accessMode: "ReadWriteOnce"
  

# Service
service:
  # Set the service type.
  type: "LoadBalancer"
  # Add external IP to access application outside the cluster using the IP mentioned below.
  externalIP: ""
  engine: 
    # Engine application is accessed by using below mentioned service port, so add port as per the requirement else it would be set 63366 as default port.
    servicePort: 63366
    # If traditional engine port is different from 63366 while migrating from traditional to container environment then in this case 
    # we need to change container port as traditional engine port value else It is not required to change the container port value.    
    containerPort: 63366
  psMoreSecure: 
    # More Secure Perimeter Server application is accessed by using below mentioned service port, so add the port number as per the requirement.
    # The below mentioned service port must be used as remote port while configuring more secure perimeter server.   
    servicePort:  
    
  # Configure adapter ports if we are not using Less Secure Perimeter Server. Below are the sample that how add adapter ports.
  adapters: []
  
# Configure adapter Ports
  #adapters:
    #- name: ftp-adapter
    #  port: 40010
    #- name: sft-adapter
    #  port: 40011 
    #- name: http-adapter
    #  port: 40012       

# Secret 
secret:
  # create secret and set the secret name below 
  secretName: secret-sspengine 

  
# Use existing service account or manage by helm chart.
serviceAccount:
  # true - Manage by helm chart
  # false - manage by deployment user. If you are changing from true to false then in this case you need to provide service account name.
  # recommended to use true value.  
  create: true
  name: ""

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## Container CPU -  limit and request both are set 1 CPU(1000m) as default value but we can modify as per the requirement.
## Container Memory - limit and request both are set 3 GB as default value but we can modify as per the requirement.
resources:
  limits:
    cpu: 1000m
    memory: 3Gi
  requests:
    cpu: 1000m
    memory: 3Gi

affinity:
  # https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity-beta-feature
  # The matchExpression for key 'kubernetes.io/arch' is automatically added based on
  # architecture preference specified in 'arch'
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
  #    nodeSelectorTerms:
  #    - matchExpressions:
  #      - key: kubernetes.io/e2e-az-name
  #        operator: In
  #        values:
  #        - e2e-az1
  #        - e2e-az2
# The matchExpression for key 'kubernetes.io/arch' is automatically added based on
# architecture preference specified in 'arch'
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution: []
    preferredDuringSchedulingIgnoredDuringExecution: []

# liveness and readiness Probe
livenessProbe:
  initialDelaySeconds: 200
  timeoutSeconds: 30
  periodSeconds: 60
  failureThreshold: 10

readinessProbe:
  initialDelaySeconds: 190
  timeoutSeconds: 5
  periodSeconds: 60
  failureThreshold: 10

route:
  enabled: true

  
# The following files can be customized using key value pair in the list format.
# bin/log.properties, bin/security.properties, bin/perimeter.properties, bin/cdsp.properties, bin/portal/mediatypes.properties 
# bin/portal/pages.properties, conf/log4j.properties
# Add/Update: Key and Value both must be provided in the below format.
# <File Name Without Extension>_<Property Name>=<Property Value>
customProperties: []
# below is the example: 
#customProperties:
#  - log_audit.log.maxfilesize=10MB
#  - perimeter_conduitStreamPair.bufferSize=500K


# Add/Update VM arguments in the list format
# <Key as Java property name>=<value>
vmArguments: []
# below is the example: 
#vmArguments:
#  - Djavax.net.debug=ssl,handshake,data,trustmanager
#  - Xdump:java+heap:events=user


# Use to import custom certificate which was exported from the CM.
# set the value "true" to import the custom certificate.
# set the value "false" to not import the custom certificate.  
customCertificate:
  customCertEnabled: false
  # set alias name
  commonCertAlias: ""
  # set key certificate file name which was exported from the CM.
  commonKeyCertFile: ""
# below is the example: 
#customCertificate:
#  customCertEnabled: true
#  commonCertAlias: "commonCert"
#  commonKeyCertFile: "commonDefKeyCert.txt"


# The custom directories/files can be mapped using the list format.
# For mapping, We need to provide full path of the file or directory. 
# First we need to create the directory with 'ENG_RESOURCES' name if it is not available into PV. 
# and keep the custom directories/files into created directory. 
customFiles: []
# In the below example we need to keep aspera.conf, log4j2.xml, ncipher_gen2.cfg.jsse and lunasa_6_0.cfg.jsse files and
# Signon directory inside 'ENG_RESOURCES' directory.
# so that the container will copy these files into respective directory.   
#customFiles:
#  - /bin/aspera.conf
#  - /conf/log4j2.xml
#  - /conf/lunasa_6_0.cfg.jsse
#  - /conf/ncipher_gen2.cfg.jsse
#  - /Signon 

  


